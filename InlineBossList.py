# ---------------------------------------------------------------------------------
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Author: danyagreench
# Commands:
# .bosslist | helpibl
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà    ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñÑ ‚ñà   ‚ñà
# ---------------------------------------------------------------------------------------------

# –≤–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è
__version__ = (6, 6, 6)
# meta developer: @hikka_m
# only hikka

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import asyncio
import re
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions
import logging
import argparse
from asyncio import sleep
from .. import loader, utils
from ..inline.types import InlineCall

logger = logging.getLogger(__name__)

@loader.tds
class InlineBossList(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è MineEVO / –ò–Ω–ª–∞–π–Ω –±–æ—Å—Å –ª–∏—Å—Ç"""
    strings = {
        "name" : "InlineBossList",
        'gif_inline' : '–ë–æ—Å—Å –õ–∏—Å—Ç –≤ inline',
        'thank_you': "–ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ —ç—Ç–æ!",
    }
    
    


    async def client_ready(self):
        
        self._backup_channel, _ = await utils.asset_channel(
            self._client,
            "InlineBossList",
            "–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è InlineBossList –æ—Ç @hikka_m\n–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏–ª–∏ –±–æ—Ç–æ–≤!",
            silent=True,
            archive=True,
            _folder="hikka",
        )

        await self.client(functions.channels.InviteToChannelRequest(self._backup_channel, ['@mine_evo_bot']))
        await self.client(functions.channels.EditAdminRequest(
                channel=self._backup_channel,
                user_id="@mine_evo_bot",
                admin_rights=ChatAdminRights(ban_users=True, post_messages=True, edit_messages=True),
                rank="MineEVO",
            )
        )
        thank = self.config['thank_you']
        if thank == True:
            self.config['thank_you'] = False
            await self.client.send_message('me','<emoji document_id=5465465194056525619>üëç</emoji><b>, –ú–æ–¥—É–ª—å InlineBossList —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏–∏ –°–ø–æ–Ω—Å–æ—Ä –∏–ª–∏ –≤—ã—à–µ, —Ç–æ –º–æ–¥—É–ª—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.</b>')
        
        
        

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "thank_you", True,
                lambda: self.strings("thank_you"),
                validator=loader.validators.Boolean()
            ),
            
        )
        @loader.command()
    async def helpibl(self, message):
    	''' - –ø–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é'''
    	await utils.answer(message,f"<b>–ü–æ–º–æ—â—å –ø–æ –º–æ–¥—É–ª—é InlineBossList</b>\n\n‚Ä¢ <b>–ï—Å–ª–∏ —É –≤–∞—Å –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –ò–Ω–ª–∞–π–Ω –ë–æ—Å—Å –õ–∏—Å—Ç, –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –ø—Ä–æ—Å–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏, –∑–∞–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –≤ –∞—Ä—Ö–∏–≤–µ, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª –º–æ–¥—É–ª—å ¬´InlineBossList¬ª, –∏ —É–¥–∞–ª–∏—Ç–µ —Ç–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –æ—Ç –≤–∞—Å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ—Å—Ç–∞–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –±–æ—Ç MineEVO –Ω–µ —Å–∫–∏–Ω—É–ª –±–æ—Å—Å –ª–∏—Å—Ç.</b>")
    @loader.command(alias = 'bl')    
    async def bosslist(self, message):
        ''' - –∏–Ω–ª–∞–π–Ω –±–æ—Å—Å –ª–∏—Å—Ç'''
        gif_on_top = self.config['gif_inline']

        await self.inline.form(
            text = '–ù–∞–∂–º–∏—Ç–µ –ë–æ—Å—Å –õ–∏—Å—Ç',
            gif = gif_on_top,
            message=message,
            reply_markup=[
                [
                    {
                        "text": "üíÄ –ë–æ—Å—Å –ª–∏—Å—Ç",
                        "callback": self.list,
                    },
                ],              
                [
                    {
                        "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                        "action": "close",
                    }
                ],
            ],
        )
    async def list(self, call: InlineCall):
        async with self.client.conversation(self._backup_channel) as conv:
                await conv.send_message(f'–ë–æ—Å—Å –ª–∏—Å—Ç')
                response = (await conv.get_response()).message
        await call.edit(
            text=response,
            reply_markup=[
                [
                    {
                        "text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        "callback": self.obnovit,
                    },
                ],               
                [
                    {
                        "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                        "action": "close",
                    }
                ],
            ],
        )    
    async def obnovit(self, call: InlineCall):
        async with self.client.conversation(self._backup_channel) as conv:
                await conv.send_message(f'–ë–æ—Å—Å –ª–∏—Å—Ç')
                response = (await conv.get_response()).message
        await call.edit(
            text=response,
            reply_markup=[
                [
                    {
                        "text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        "callback": self.list,
                    },
                ],               
                [
                    {
                        "text": "üîª –ó–∞–∫—Ä—ã—Ç—å",
                        "action": "close",
                    }
                ],
            ],
        )    
