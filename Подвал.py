# ---------------------------------------------------------------------------------
# ( o.o )  üîì Not licensed.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Author: danyagreench
# Commands:
# .–º–æ–π_–ø–æ–¥–≤–∞–ª | .–ø–æ—Å–∞–¥–∏—Ç—å_–≤_–ø–æ–¥–≤–∞–ª | .—Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å_–ø–æ–¥–≤–∞–ª | .–º–æ–Ω–µ—Ç—ã | .—Å—Ç–∞—Ç–∞
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà    ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñÑ ‚ñà   ‚ñà
# ---------------------------------------------------------------------------------------------

# –≤–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è
__version__ = (6, 6, 6)
# meta developer: @hikka_m
# only hikka

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import random
from asyncio import sleep
from .. import loader, utils
from ..inline.types import InlineCall
import asyncio
from telethon.tl.functions.users import GetFullUserRequest
import re
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions

@loader.tds
class –ü–æ–¥–≤–∞–ª(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–¥–≤–∞–ª"""
    strings = {
        "name" : "–ü–æ–¥–≤–∞–ª",
    }
    async def client_ready(self):
        self._backup_channel, _ = await utils.asset_channel(
            self._client,
            "–ü–æ–¥–≤–∞–ª",
            "–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è –ü–æ–¥–≤–∞–ª",
            silent=True,
            archive=True,
            _folder="hikka",
        )

    @loader.command()
    async def –º–æ–π_–ø–æ–¥–≤–∞–ª(self,message: Message):
        '''- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–≤–∞–ª'''
        user = await message.client.get_me()
        user_id = user.id
        first_name = user.first_name or "null"
        last_name = user.last_name or "null"
        username = user.username or "null"
        det = self.get("det",0)
        await self.inline.form(
            text=f"<b>–ü–æ–¥–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n–î–µ—Ç–µ–π –≤ –ø–æ–¥–≤–∞–ª–µ:</b> <code>{det}</code>",
            message=message,
            reply_markup=[
                [
                    {
                        "text" : "–í—ã–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–π",
                        "callback" : self.resetdet,
                    },
                    {
                        "text": "–ü—Ä–æ–¥–∞—Ç—å –æ—Ä–≥–∞–Ω—ã",
                        "callback": self.naorgans,
                    },
                ],
                [
                    {
                        "text" : "–ó–∞–∫—Ä—ã—Ç—å",
                        "action" : "close",
                    }
                ]
            ]
        )
    async def resetdet(self,call: InlineCall):
        det = self.get("det",0)
        self.set("det",0)
        det2 = self.get("det",0)
        await call.edit(
                text=f"<b>–ü–æ–¥–≤–∞–ª –±—ã–ª —Ä–∞—Å–ø—É—â–µ–Ω.\n–î–µ—Ç–µ–π –≤ –ø–æ–¥–≤–∞–ª–µ:</b> <code>{det2}</code>",
                reply_markup=[
                [
                    {
                        "text" : "–í—ã–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–π",
                        "callback" : self.resetdet,
                    },
                    {
                        "text": "–ü—Ä–æ–¥–∞—Ç—å –æ—Ä–≥–∞–Ω—ã",
                        "callback": self.naorgans,
                    },
                ],
                [
                    {
                        "text" : "–ó–∞–∫—Ä—ã—Ç—å",
                        "action" : "close",
                    }
                ]
            ]
        )
    async def naorgans(self,call: InlineCall):
        det = self.get("det", 0)
        moneti = self.get("moneti", 0)
        monetivs = self.get("monetivs", 0)

        moneti += det
        monetivs += det
        self.set("moneti", moneti)
        self.set("monetivs", monetivs)
        self.set("det", 0)
        det2 = self.get("det", 0)
        await call.edit(
                text=f"<b>–í—Å–µ –æ—Ä–≥–∞–Ω—ã –¥–µ—Ç–µ–π –±—ã–ª–∏ –ø—Ä–æ–¥–∞–Ω—ã, –¥–µ—Ç–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.\n–î–µ—Ç–µ–π –≤ –ø–æ–¥–≤–∞–ª–µ:</b> <code>{det2}</code>",
                reply_markup=[
                [
                    {
                        "text" : "–í—ã–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–π",
                        "callback" : self.resetdet,
                    },
                    {
                        "text": "–ü—Ä–æ–¥–∞—Ç—å –æ—Ä–≥–∞–Ω—ã",
                        "callback": self.naorgans,
                    },
                ],
                [
                    {
                        "text" : "–ó–∞–∫—Ä—ã—Ç—å",
                        "action" : "close",
                    },
                ],
            ]
        )

    @loader.command()
    async def –ø–æ—Å–∞–¥–∏—Ç—å_–≤_–ø–æ–¥–≤–∞–ª(self, message: Message):
        '''- –ü–æ—Å–∞–¥–∏—Ç—å –≤ –ø–æ–¥–≤–∞–ª'''
        det = self.get("det", 0)
        detvs = self.get("detvs", 0)
        if random.random() < 0.5:
            await utils.answer(message, "<b>–ü–æ–ª–∏—Ü–∏—è –Ω–∞—à–ª–∞ —Ç–µ–±—è, –∏ –∑–∞–±—Ä–∞–ª–∞ —Ä–µ–±—ë–Ω–∫–∞... –ù–æ, —Ç—ã —É—Å–ø–µ–ª —Å–±–µ–∂–∞—Ç—å</b>")
        else:
            await utils.answer(message, "<b>+</b> <code>1</code> <b>–Ω–æ–≤—ã–π —Ä–µ–±—ë–Ω–æ–∫ –≤ –ø–æ–¥–≤–∞–ª</b>")
            det += 1
            detvs += 1
            self.set("det", det)
            self.set("detvs", detvs)

    @loader.command()
    async def —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å_–ø–æ–¥–≤–∞–ª(self,message):
        '''- —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å'''
        self.set("det",0)
        await utils.answer(message, "<b>–í—Å–µ –¥–µ—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –ø–æ–¥–≤–∞–ª–µ, –±—ã–ª–∏ –≤—ã–ø—É—â–µ–Ω—ã –Ω–∞ —É–ª–∏—Ü—É.</b> üí´")

    @loader.command()
    async def –º–æ–Ω–µ—Ç—ã(self,message):
        '''- –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç'''
        moneti = self.get("moneti", 0)
        user = await message.client.get_me()
        user_id = user.id
        first_name = user.first_name or "null"
        last_name = user.last_name or "null"
        username = user.username or "null"
        await utils.answer(message, f"<b>@{username}, –≤–∞—à –±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç: {moneti}</b>")
    @loader.command()
    async def —Å—Ç–∞—Ç–∞(self,message):
        '''- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'''
        user = await message.client.get_me()
        user_id = user.id
        first_name = user.first_name or "null"
        last_name = user.last_name or "null"
        username = user.username or "null"
        monetivs = self.get("monetivs",0)
        detvs = self.get("detvs",0)
        await utils.answer(message, f"<b>@{username}, –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ú–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ —Å –ø—Ä–æ–¥–∞–∂–∏ –æ—Ä–≥–∞–Ω–æ–≤: {monetivs}\n–î–µ—Ç–µ–π –±—ã–ª–æ –≤ –ø–æ–¥–≤–∞–ª–µ –≤—Å–µ–≥–æ: {detvs}</b>")
    @loader.command()
    async def –∫–µ–π—Å—ã(self,message):
        '''- –≤–∞—à–∏ –∫–µ–π—Å—ã'''
        user = await message.client.get_me()
        user_id = user.id
        first_name = user.first_name or "null"
        last_name = user.last_name or "null"
        username = user.username or "null"
        detcase = self.get("detcase",0)
        monetcase = self.get("monetcase",0)
        if detcase < 1 and monetcase < 1:
            await utils.answer(message, f"<b>@{username}, –≤–∞—à–∏ –∫–µ–π—Å—ã:\n\n–ü—É—Å—Ç–æ</b>")
        elif monetcase < 1 and detcase > 0:
            await utils.answer(message, f"<b>@{username}, –≤–∞—à–∏ –∫–µ–π—Å—ã:\n\n–î–µ—Ç-–ö–µ–π—Å: {detcase}</b>")
        elif detcase < 1 and monetcase > 0:
            await utils.answer(message, f"<b>@{username}, –≤–∞—à–∏ –∫–µ–π—Å—ã:\n\n–ú–æ–Ω–µ—Ç-–ö–µ–π—Å: {monetcase}</b>")
        elif detcase > 0 and monetcase > 0:
            await utils.answer(message, f"<b>@{username}, –≤–∞—à–∏ –∫–µ–π—Å—ã:\n\n–î–µ—Ç-–ö–µ–π—Å: {detcase}\n–ú–æ–Ω–µ—Ç-–ö–µ–π—Å: {monetcase}</b>")
    @loader.command()
    async def –æ—Ç–∫—Ä—ã—Ç—å_–¥–∫(self, message: Message):
        '''- –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç-–∫–µ–π—Å'''
        detcase = self.get("detcase",0)
        random_numgdc = random.randint(1, 100)
        det = self.get("det",0)
        detvs = self.get("detvs",0)
        if detcase == 0:
            await utils.answer(message, "<b>–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –î–µ—Ç-–ö–µ–π—Å–∞</b>")
        else:
            await utils.answer(message, f"<b>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ <code>1</code> –î–µ—Ç-–ö–µ–π—Å, –≤–∞–º –≤—ã–ø–∞–ª–æ: <code>{random_numgdc}</code> –¥–µ—Ç–µ–π</b>")
            det += random_numgdc
            detvs += random_numgdc
            detcase -= 1
            self.set("det", det)
            self.set("detvs", detvs)
            self.set("detcase", detcase)
    @loader.command()
    async def –æ—Ç–∫—Ä—ã—Ç—å_–º–∫(self, message: Message):
        '''- –û—Ç–∫—Ä—ã—Ç—å –º–æ–Ω–µ—Ç-–∫–µ–π—Å'''
        monetcase = self.get("monetcase",0)
        random_numgdc = random.randint(1, 150)
        moneti = self.get("moneti",0)
        monetivs = self.get("monetivs",0)
        if monetcase == 0:
            await utils.answer(message, "<b>–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ú–æ–Ω–µ—Ç-–ö–µ–π—Å–∞</b>")
        else:
            await utils.answer(message, f"<b>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ <code>1</code> –ú–æ–Ω–µ—Ç-–ö–µ–π—Å, –≤–∞–º –≤—ã–ø–∞–ª–æ: <code>{random_numgdc}</code> –º–æ–Ω–µ—Ç</b>")
            moneti += random_numgdc
            monetivs += random_numgdc
            monetcase -= 1
            self.set("moneti", moneti)
            self.set("monetivs", monetivs)
            self.set("monetcase", monetcase)
    @loader.command()
    async def –∫—É–ø–∏—Ç—å_–¥–∫(self, message: Message):
        '''- –ö—É–ø–∏—Ç—å –¥–µ—Ç-–∫–µ–π—Å'''
        detcase = self.get("detcase",0)
        det = self.get("det",0)
        if det < 50:
            await utils.answer(message, "<b>–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ—Ç–µ–π</b>")
        else:
            await utils.answer(message, f"<b>–í—ã –∫—É–ø–∏–ª–∏ <code>1</code> –î–µ—Ç-–ö–µ–π—Å, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <code>50</code> –¥–µ—Ç–µ–π</b>")
            det -= 50
            detcase += 1
            self.set("det", det)
            self.set("detcase", detcase)
    @loader.command()
    async def –∫—É–ø–∏—Ç—å_–º–∫(self, message: Message):
        '''- –ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç-–∫–µ–π—Å'''
        monetcase = self.get("monetcase",0)
        moneti = self.get("moneti",0)
        if moneti < 90:
            await utils.answer(message, "<b>–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç</b>")
        else:
            await utils.answer(message, f"<b>–í—ã –∫—É–ø–∏–ª–∏ <code>1</code> –ú–æ–Ω–µ—Ç-–ö–µ–π—Å, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <code>90</code> –º–æ–Ω–µ—Ç</b>")
            moneti -= 90
            monetcase += 1
            self.set("moneti", moneti)
            self.set("monetcase", monetcase)
